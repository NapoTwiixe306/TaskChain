# Fichier docker-compose.yml

services:
  # Nom du projet suivi de l’élément concerné pour une meilleure organisation
  reactfront:
    build:
      context: ./Front
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./Front:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - reactdb 
    networks:
      - reactboilerplate

  # Nom du projet suivi de l’élément concerné pour une meilleure organisation
  reactback:
    build:
      context: ./Back
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./Back:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=reactdb  
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      reactdb:
        condition: service_healthy 
    networks:
      - reactboilerplate

  reactdb:
    image: mysql:8  
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - reactboilerplate

volumes:
  db_data:

# Réseau dédié pour isoler les services du projet
networks:
  reactboilerplate:
    driver: bridge
